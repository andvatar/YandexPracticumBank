pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'bank-db'
        DB_USER         = 'postgres'
        IMAGE_TAG       = "latest"
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                stage('accounts') {
                    steps {
                        dir('accounts') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('blocker') {
                    steps {
                        dir('blocker') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('cash') {
                    steps {
                        dir('cash') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('exchange') {
                    steps {
                        dir('exchange') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('exchangeGenerator') {
                    steps {
                        dir('exchangeGenerator') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('frontUI') {
                    steps {
                        dir('frontUI') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('notifications') {
                    steps {
                        dir('notifications') {
                            sh 'mvn clean test'
                        }
                    }
                }
                stage('transfer') {
                    steps {
                        dir('transfer') {
                            sh 'mvn clean test'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t accounts:${IMAGE_TAG} accounts
                docker build -t blocker:${IMAGE_TAG} blocker
                docker build -t cash:${IMAGE_TAG} cash
                docker build -t exchange:${IMAGE_TAG} exchange
                docker build -t exchangegenerator:${IMAGE_TAG} exchangeGenerator
                docker build -t front-ui:${IMAGE_TAG} frontUI
                docker build -t notifications:${IMAGE_TAG} notifications
                docker build -t transfer:${IMAGE_TAG} transfer
                """
            }
        }

        stage('Setup Ingress Nginx') {
            steps {
                script {
                    sh 'helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx'
                    sh 'helm repo update'
                    sh 'helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.admissionWebhooks.service.targetPort=443'
                }
            }
        }

        /*stage('Setup Keycloak') {
          steps {
            script {
              sh 'helm repo add bitnami https://charts.bitnami.com/bitnami'
              sh 'helm repo update'
              sh 'helm upgrade --install keycloak bitnami/keycloak --namespace test --create-namespace'
            }
          }
        }

        stage('Install PostgreSQL to TEST') {
            steps {
                sh """
                helm repo add helm-stable https://charts.helm.sh/stable
                helm repo update

                helm upgrade --install postgres helm-stable/postgresql \\
                  --namespace test --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}

                echo ${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for TEST') {
            steps {
                sh """
                kubectl create secret generic bank-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n test --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }*/

//         export SPRING_DATASOURCE_PASSWORD=$(kubectl get secret --namespace test postgres-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode)

        stage('Helm Deploy to TEST') {
            steps {
                dir('bank-app') {
                    sh "helm dependency build"
                    sh """
                    helm upgrade --install parent-app . \\
                        --namespace test --create-namespace \\
                        --set global.domain=test.local \\
                        --set accounts.ingress.hosts[0].host=accounts.test.local \\
                        --set accounts.ingress.hosts[0].paths[0].path="/" \\
                        --set accounts.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                        --set blocker.ingress.hosts[0].host=blocker.test.local \\
                        --set blocker.ingress.hosts[0].paths[0].path="/" \\
                        --set blocker.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                        --set cash.ingress.hosts[0].host=cash.test.local \\
                        --set cash.ingress.hosts[0].paths[0].path="/" \\
                        --set cash.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                        --set exchange.ingress.hosts[0].host=exchange.test.local \\
                        --set exchange.ingress.hosts[0].paths[0].path="/" \\
                        --set exchange.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                        --set exchange-generator.ingress.hosts[0].host=exchange-generator.test.local \\
                        --set exchange-generator.ingress.hosts[0].paths[0].path="/" \\
                        --set exchange-generator.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                        --set front-ui.ingress.hosts[0].host=front-ui.test.local \\
                        --set front-ui.ingress.hosts[0].paths[0].path="/" \\
                        --set front-ui.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                        --set notifications.ingress.hosts[0].host=notifications.test.local \\
                        --set notifications.ingress.hosts[0].paths[0].path="/" \\
                        --set notifications.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                        --set transfer.ingress.hosts[0].host=transfer.test.local \\
                        --set transfer.ingress.hosts[0].paths[0].path="/" \\
                        --set transfer.ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                    """
                }
                /*sh """
                helm upgrade --install accounts bank-app/charts/accounts \\
                  --namespace test --create-namespace \\
                  --set image.repository=accounts \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=accounts.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install blocker bank-app/charts/blocker \\
                  --namespace test --create-namespace \\
                  --set image.repository=blocker \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=blocker.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install cash bank-app/charts/cash \\
                  --namespace test --create-namespace \\
                  --set image.repository=cash \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=cash.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchange bank-app/charts/exchange \\
                  --namespace test --create-namespace \\
                  --set image.repository=exchange \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchangegenerator bank-app/charts/exchangeGenerator \\
                  --namespace test --create-namespace \\
                  --set image.repository=exchangegenerator \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchangegenerator.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install frontui bank-app/charts/frontUI \\
                  --namespace test --create-namespace \\
                  --set image.repository=frontui \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=front-ui.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install notifications bank-app/charts/notifications \\
                  --namespace test --create-namespace \\
                  --set image.repository=notifications \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=notifications.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install transfer bank-app/charts/transfer \\
                  --namespace test --create-namespace \\
                  --set image.repository=transfer \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=transfer.test.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """*/
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        /*stage('Install PostgreSQL to PROD') {
            steps {
                sh """
                helm upgrade --install postgres helm-stable/postgresql \\
                  --namespace prod --create-namespace \\
                  --set auth.database=${DB_NAME} \\
                  --set auth.username=${DB_USER} \\
                  --set auth.password=${DB_PASSWORD}
                """
            }
        }

        stage('Create DB Secrets for PROD') {
            steps {
                sh """
                kubectl create secret generic bank-db \\
                  --from-literal=password=${DB_PASSWORD} \\
                  -n prod --dry-run=client -o yaml | kubectl apply -f -
                """
            }
        }*/

        stage('Helm Deploy to PROD') {
            steps {
                sh "helm dependency build"
                sh """
                helm upgrade --install parent-app . \\
                    --namespace prod --create-namespace \\
                    --set global.domain=prod.local \\
                    --set accounts.ingress.hosts[0].host=accounts.prod.local \\
                    --set accounts.ingress.hosts[0].paths[0].path="/" \\
                    --set accounts.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                    --set blocker.ingress.hosts[0].host=blocker.prod.local \\
                    --set blocker.ingress.hosts[0].paths[0].path="/" \\
                    --set blocker.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                    --set cash.ingress.hosts[0].host=cash.prod.local \\
                    --set cash.ingress.hosts[0].paths[0].path="/" \\
                    --set cash.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                    --set exchange.ingress.hosts[0].host=exchange.prod.local \\
                    --set exchange.ingress.hosts[0].paths[0].path="/" \\
                    --set exchange.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                    --set exchange-generator.ingress.hosts[0].host=exchange-generator.prod.local \\
                    --set exchange-generator.ingress.hosts[0].paths[0].path="/" \\
                    --set exchange-generator.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                    --set front-ui.ingress.hosts[0].host=front-ui.prod.local \\
                    --set front-ui.ingress.hosts[0].paths[0].path="/" \\
                    --set front-ui.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                    --set notifications.ingress.hosts[0].host=notifications.prod.local \\
                    --set notifications.ingress.hosts[0].paths[0].path="/" \\
                    --set notifications.ingress.hosts[0].paths[0].pathType="ImplementationSpecific" \\
                    --set transfer.ingress.hosts[0].host=transfer.prod.local \\
                    --set transfer.ingress.hosts[0].paths[0].path="/" \\
                    --set transfer.ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """
                /*sh """
                helm upgrade --install accounts bank-app/charts/accounts \\
                  --namespace prod --create-namespace \\
                  --set image.repository=accounts \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=accounts.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install blocker bank-app/charts/blocker \\
                  --namespace prod --create-namespace \\
                  --set image.repository=blocker \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=blocker.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install cash bank-app/charts/cash \\
                  --namespace prod --create-namespace \\
                  --set image.repository=cash \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=cash.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchange bank-app/charts/exchange \\
                  --namespace prod --create-namespace \\
                  --set image.repository=exchange \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchange.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install exchangegenerator bank-app/charts/exchangeGenerator \\
                  --namespace prod --create-namespace \\
                  --set image.repository=exchangegenerator \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=exchangegenerator.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install frontui bank-app/charts/frontUI \\
                  --namespace prod --create-namespace \\
                  --set image.repository=frontui \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=front-ui.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install notifications bank-app/charts/notifications \\
                  --namespace prod --create-namespace \\
                  --set image.repository=notifications \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=notifications.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"

                helm upgrade --install transfer bank-app/charts/transfer \\
                  --namespace prod --create-namespace \\
                  --set image.repository=transfer \\
                  --set image.tag=${IMAGE_TAG} \\
                  --set ingress.enabled=true \\
                  --set ingress.hosts[0].host=transfer.prod.local \\
                  --set ingress.hosts[0].paths[0].path="/" \\
                  --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
                """*/
            }
        }
    }
}