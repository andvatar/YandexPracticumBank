# Global values (if any)
global:
  domain: test.local # Example domain for ingress

service:
  port: 81

accounts:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: accounts # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8082
  ingress:
    enabled: true
    className: "nginx" # Specify your ingress controller class
    hosts:
      - host: accounts.test.local # Use global domain or specific
        paths:
          - path: /
            pathType: ImplementationSpecific
  # Database connection details passed to customer-service configmap
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-bank-db.{{ .Release.Namespace }}.svc.cluster.local:5432/bank-db"
    # Secret reference for password is more secure
    database_username: "postgres"
    # database_password_secret: "{{ .Release.Name }}-customer-db-postgresql" # Reference to secret created by DB chart
    # database_password_secret_key: "postgresql-password" # Key within the secret


blocker:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: blocker # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8088
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: blocker.test.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    suspect_amount: "400"

cash:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: cash # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8083
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: cash.test.local
        paths:
          - path: /
            pathType: ImplementationSpecific

exchange:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: exchange # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8084
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: exchange.test.local
        paths:
          - path: /
            pathType: ImplementationSpecific
  config:
    # --- CORRECTED DB URL --- Using '<ReleaseName>-<Alias>' service name convention
    database_url: "jdbc:postgresql://{{ .Release.Name }}-bank-db.{{ .Release.Namespace }}.svc.cluster.local:5432/bank-db"
    # Secret reference for password is more secure
    database_username: "postgres"

exchange-generator:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: exchangegenerator # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8086
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: exchange-generator.test.local
        paths:
          - path: /
            pathType: ImplementationSpecific

front-ui:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: frontui # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8090
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: front-ui.test.local
        paths:
          - path: /
            pathType: ImplementationSpecific

notifications:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: notifications # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8092
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: notifications.test.local
        paths:
          - path: /
            pathType: ImplementationSpecific

transfer:
  replicaCount: 1
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: transfer # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8087
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: transfer.test.local
        paths:
          - path: /
            pathType: ImplementationSpecific
# Configuration for the customer-db (PostgreSQL dependency)
# Values here are prefixed according to the Bitnami PostgreSQL chart's structure
# Check the Bitnami chart's values.yaml for all available options
bank-db:
  enabled: true
  # Override values from the official postgresql chart
  auth:
    database: bank-db
    username: postgres
    # Use existingSecret or provide password (less secure for production)
    # existingSecret: "{{ .Release.Name }}-customer-db-postgresql" # Name of the secret to use/create
    password: postgres # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi # Small size for example
    initdb:
      scripts:
        configMap: bank-app-db-init

bank-keycloak:
  auth:
    adminUser: admin
    adminPassword: admin

  postgresql:
    enabled: false
#    auth:
#      username: bn_keycloak
#      password: bn_keycloak
#      database: bitnami_keycloak

  extraEnvVars:
    - name: KEYCLOAK_ADMIN
      value: admin
    - name: KEYCLOAK_ADMIN_PASSWORD
      value: admin
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm"

  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config

  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
      readOnly: true
  readinessProbe:
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
  livenessProbe:
    initialDelaySeconds: 180
    periodSeconds: 10
    timeoutSeconds: 5
  #service:
  #  ports:
  #    http: 8080
  #  targetPort: http
  #  main:
  #    ports:
  #      http: 8080
  #    targetPort: http
  networkPolicy:
    enabled: true
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: "test"
        ports:
          - port: 8080
            protocol: TCP