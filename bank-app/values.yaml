# Global values (if any)
global:
  domain: test.local # Example domain for ingress
  service:
    name: "accounts"
  image:
    tag: "latest"

service:
  port: 81

bank-accounts-service:
  replicaCount: 1

  configmap:
    enabled: true
    name: bank-accounts-service-config
  secret:
    enabled: true

  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-accounts-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8082
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8082"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx" # Specify your ingress controller class
    hosts:
      - host: "accounts" # Use global domain or specific
        paths:
          - path: /
            serviceName: accounts
            pathType: ImplementationSpecific
  # Database connection details passed to customer-service configmap
  config:
    DB_HOST: "{{ .Release.Name }}-bank-db.{{ .Release.Namespace }}.svc.cluster.local"
    DB_PORT: "5432"
    DB_NAME: "yandex_bank"
    DB_SCHEMA: "accounts"
    database_username: "postgres"
    KAFKA_TOPIC: "notification-topic"


bank-blocker-service:
  replicaCount: 1
  configmap:
    enabled: true
    name: bank-blocker-service-config
  secret:
    enabled: false
  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-blocker-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8088
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8088"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: "blocker"
        paths:
          - path: /
            serviceName: blocker
            pathType: ImplementationSpecific
  config:
    suspect_amount: "400"

bank-cash-service:
  replicaCount: 1

  configmap:
    enabled: true
    name: bank-cash-service-config
  secret:
    enabled: false

  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-cash-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8083
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8083"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: "cash"
        paths:
          - path: /
            serviceName: cash
            pathType: ImplementationSpecific
  config:
    KAFKA_TOPIC: "notification-topic"

bank-exchange-service:
  replicaCount: 1

  configmap:
    enabled: true
    name: bank-exchange-service-config
  secret:
    enabled: true

  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-exchange-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8084
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8084"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: "exchange"
        paths:
          - path: /
            serviceName: exchange
            pathType: ImplementationSpecific
  config:
    DB_HOST: "{{ .Release.Name }}-bank-db.{{ .Release.Namespace }}.svc.cluster.local"
    DB_PORT: "5432"
    DB_NAME: "yandex_bank"
    DB_SCHEMA: "exchange"
    database_username: "postgres"
    KAFKA_TOPIC: "exchange-rates-topic"

bank-exchangegenerator-service:
  replicaCount: 1

  configmap:
    enabled: true
    name: bank-exchange-generator-service-config
  secret:
    enabled: false

  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-exchangegenerator-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8086
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8086"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: "exchange-generator"
        paths:
          - path: /
            serviceName: exchange-generator
            pathType: ImplementationSpecific

  config:
    KAFKA_TOPIC: "exchange-rates-topic"

bank-frontui-service:
  replicaCount: 1

  configmap:
    enabled: true
    name: bank-frontui-service-config
  secret:
    enabled: false

  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-frontui-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8090
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8090"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: "front-ui"
        paths:
          - path: /
            serviceName: front-ui
            pathType: ImplementationSpecific

bank-notifications-service:
  replicaCount: 1

  configmap:
    enabled: true
    name: bank-notifications-service-config
  secret:
    enabled: false

  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-notifications-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8092
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8092"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: "notifications"
        paths:
          - path: /
            serviceName: notifications
            pathType: ImplementationSpecific
  config:
    KAFKA_TOPIC: "notification-topic"

bank-transfer-service:
  replicaCount: 1

  configmap:
    enabled: true
    name: bank-transfer-service-config
  secret:
    enabled: false

  image:
    # --- REVERTED TO LOCAL REPO ---
    repository: bank-transfer-service # Removed registry prefix
    tag: "latest"
    pullPolicy: IfNotPresent # Use IfNotPresent for local images
    # -----------------------------
  service:
    type: ClusterIP
    port: 8087
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8087"
    prometheus.io/path: "/actuator/prometheus"
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: "transfer"
        paths:
          - path: /
            serviceName: transfer
            pathType: ImplementationSpecific
  config:
    KAFKA_TOPIC: "notification-topic"
# Configuration for the customer-db (PostgreSQL dependency)
# Values here are prefixed according to the Bitnami PostgreSQL chart's structure
# Check the Bitnami chart's values.yaml for all available options
bank-db:
  enabled: true
  # Override values from the official postgresql chart
  auth:
    database: yandex_bank
    username: postgres
    # Use existingSecret or provide password (less secure for production)
    # existingSecret: "{{ .Release.Name }}-customer-db-postgresql" # Name of the secret to use/create
    password: postgres # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi # Small size for example
    initdb:
      scripts:
        configMap: bank-app-db-init

bank-keycloak:
  auth:
    adminUser: admin
    adminPassword: admin

  postgresql:
    enabled: true
    service:
      port: 5433
    auth:
      username: bn_keycloak
      password: bn_keycloak
      database: bitnami_keycloak

  extraEnvVars:
    - name: KEYCLOAK_ADMIN
      value: admin
    - name: KEYCLOAK_ADMIN_PASSWORD
      value: admin
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm"

  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config

  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
      readOnly: true
  readinessProbe:
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
  livenessProbe:
    initialDelaySeconds: 180
    periodSeconds: 10
    timeoutSeconds: 5
  networkPolicy:
    enabled: true
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                kubernetes.io/metadata.name: "bank-keycloak"
        ports:
          - port: 8080
            protocol: TCP

bank-kafka:
  enabled: true
  image:
    tag: "3.6.1"

  controller:
    replicaCount: 3

  kraft:
    enabled: true

  listeners:
    client:
      name: CLIENT
      containerPort: 9092
      protocol: PLAINTEXT
      sslClientAuth: ""

    interbroker:
      name: INTERNAL
      containerPort: 9094
      protocol: PLAINTEXT
      sslClientAuth: ""

    external:
      name: EXTERNAL
      containerPort: 9095
      protocol: PLAINTEXT
      sslClientAuth: ""

    controller:
      name: CONTROLLER
      containerPort: 9093
      protocol: PLAINTEXT
      sslClientAuth: ""

  extraEnvVars:
    - name: KAFKA_ENABLE_KRAFT
      value: "true"
    - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
      value: "true"

bank-zipkin:
  storageType: mem
  cassandra:
    enabled: false
  ingress:
    enabled: true
    ingressClassName: "nginx"
    hostname: "zipkin.test.local"

kube-prometheus-stack:
  nodeExporter:
    enabled: false
  prometheus:
    ingress:
      enabled: true
      ingressClassName: "nginx"
      hosts:
        - prometheus.test.local
    prometheusSpec:
      additionalScrapeConfigs:
        - job_name: 'kubernetes-pods'
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
              action: keep
              regex: true

            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
              action: replace
              target_label: __metrics_path__
              regex: (.+)

            - source_labels: [ __meta_kubernetes_namespace, __meta_kubernetes_pod_name ]
              separator: '/'
              target_label: instance

            - source_labels: [ __meta_kubernetes_namespace ]
              action: replace
              target_label: namespace

            - source_labels: [ __meta_kubernetes_pod_name ]
              action: replace
              target_label: pod

  grafana:
    ingress:
      enabled: true
      hosts:
        - grafana.test.local
      annotations:
        kubernetes.io/ingress.class: nginx

kibana:
  elasticsearchHosts: "http://elasticsearch-master:9200"
  automountToken: false
  ingress:
    enabled: true
    hosts:
      - host: kibana.test.local
  extraEnvs:
    - name: server.ssl.enabled
      value: false
    - name: elasticsearch.ssl.verificationMode
      value: none
  envFrom:
    - secretRef:
      name: elasticsearch-master-credentials
  kibanaConfig:
    kibana.yml: |
      server.ssl.enabled: false
  protocol: http

elasticsearch:
  replicas: 1
  minimumMasterNodes: 1
  extraEnvs:
    - name: xpack.security.transport.ssl.enabled
      value: false
    - name: xpack.security.http.ssl.enabled
      value: false
    - name: xpack.security.transport.ssl.verification_mode
      value: none
            

logstash:
  extraVolumes:
    - name: logs-template
      configMap:
        name: elasticsearch-template-config

  extraVolumeMounts:
    - name: logs-template
      mountPath: /usr/share/logstash/templates
      readOnly: true

  logstashPipeline:
    logstash.conf: |
      input {
        kafka {
          bootstrap_servers => "bank-kafka:9092"
          topics => ["logs-topic"]
          codec  => json
        }
      }
      filter {
        mutate { 
          rename => { "level" => "[log][level]" } 
          copy => { "[@metadata][kafka][topic]" => "source_topic"}
        }
        date { 
          match => ["timestamp", "ISO8601"] 
          target => "@timestamp"
          remove_field => ["timestamp"]
        }
      }
      output {
        elasticsearch {
          hosts  => ["http://elasticsearch-master:9200"]
          index  => "bank-logs-%{+yyyy.MM.dd}"
        }
        stdout {
          codec => rubydebug
        }
      }
